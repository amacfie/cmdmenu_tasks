[
  {
    "name": "Check out a specific file from a commit",
    "cmdText": "git checkout <commit> -- <file>",
    "keywords": "undo single one previous branch",
    "numParams": 2
  },
  {
    "name": "Get hash of HEAD",
    "cmdText": "git rev-parse --short HEAD",
    "keywords": "sha sha1 current commit",
    "numParams": 0
  },
  {
    "name": "Push tag to remote",
    "cmdText": "git push <remote> <tag_name>",
    "keywords": "sync",
    "numParams": 2
  },
  {
    "name": "Rebase one commit (or branch) to a cousin",
    "cmdText": "git rebase <dest_commit> <src_commit>",
    "numParams": 2
  },
  {
    "name": "Rename branch",
    "keywords": "local",
    "cmdText": "git branch -m <old_branch> <new_branch>",
    "numParams": 2
  },
  {
    "name": "Remove file from git but don't delete",
    "keywords": "stop track tracking ignore",
    "cmdText": "git rm --staged <file>",
    "numParams": 1
  },
  {
    "name": "Commit with no message",
    "keywords": "blank nomsg msg",
    "cmdText": "git commit -m '' --allow-empty-message",
    "numParams": 0
  },
  {
    "name": "Pull, but rebase instead of merging",
    "cmdText": "git pull --rebase",
    "numParams": 0
  },
  {
    "name": "Force push",
    "cmdText": "git push --force",
    "numParams": 0
  },
  {
    "name": "Stage part of a file",
    "cmdText": "git add -p <file>",
    "numParams": 1,
    "keywords": "add patch single"
  },
  {
    "name": "Stage all changes",
    "cmdText": "git add .",
    "keywords": "add",
    "numParams": 0
  },
  {
    "name": "List stashes",
    "cmdText": "git stash list",
    "keywords": "show",
    "numParams": 0
  },
  {
    "name": "List tags",
    "cmdText": "git tag",
    "keywords": "show",
    "numParams": 0
  },
  {
    "name": "List branches",
    "cmdText": "git branch -av",
    "keywords": "show",
    "numParams": 0
  },
  {
    "name": "Log [menu]",
    "subtasks": [
      {
        "name": "Show files changed in last 2 days",
        "keywords": "log modified hours time recent previous see view",
        "cmdText": "git log --pretty=format: --name-only --since=\"2 days ago\" | sort | uniq",
        "numParams": 0
      },
      {
        "name": "See contents of last commit",
        "keywords": "display get view previous single one",
        "cmdText": "git log -n1 -p",
        "numParams": 0
      },
      {
        "name": "Show log for specific file",
        "cmdText": "git log -p <file>",
        "numParams": 1,
        "keywords": "single"
      }
    ]
  },
  {
    "name": "Delete branches [menu]",
    "subtasks": [
      {
        "name": "Delete branch",
        "keywords": "remove",
        "numParams": 1,
        "cmdText": "git branch -d <branch>"
      },
      {
        "name": "Delete remote branch",
        "keywords": "remove",
        "numParams": 2,
        "cmdText": "git push <remote> --delete <branch>"
      }
    ]
  },
  {
    "name": "Create branch [menu]",
    "subtasks" : [
      {
        "name": "Create branch",
        "keywords": "new",
        "numParams": 1,
        "cmdText": "git checkout -b <branch>"
      },
      {
        "name": "Create branch but don't checkout",
        "numParams": 1,
        "cmdText": "git branch <branch>"
      }

    ]
  },
  {
    "name": "Undo [menu]",
    "subtasks": [
      {
        "name": "Cancel merge with outstanding conflicts",
        "cmdText": "git merge --abort",
        "numParams": 0
      },
      {
        "name": "Unstage file",
        "numParams": 1,
        "cmdText": "git reset HEAD <file>"
      },
      {
        "name": "Change commit message",
        "keywords": "msg amend",
        "numParams": 1,
        "cmdText": "git rebase -i HEAD~<n>"
      },
      {
        "name": "Discard all changes in working copy",
        "keywords": "reset revert",
        "cmdText": "git reset --hard HEAD",
        "numParams": 0
      },
      {
        "name": "Discard some changes to file in working copy",
        "keywords": "checkout revert",
        "numParams": 0,
        "cmdText": "git checkout -p"
      },
      {
        "name": "Discard changes to file in working copy",
        "keywords": "checkout revert",
        "numParams": 1,
        "cmdText": "git checkout HEAD <file>"
      },
      {
        "name": "Discard latest commits not on remote",
        "keywords": "sync same",
        "cmdText": "git reset --hard <remote_branch>",
        "numParams": 1
      },
      {
        "name": "Undo commits and restore working copy",
        "keywords": "rebase interactive",
        "numParams": 1,
        "cmdText": "git rebase -i <good_commit>"
      },
      {
        "name": "Undo commits but preserve working copy",
        "keywords": "reset keep",
        "numParams": 1,
        "cmdText": "git reset <good_commit>"
      }
    ]
  },
  {
    "name": "Remotes [menu]",
    "subtasks": [
      {
        "name": "List remotes",
        "cmdText": "git remote -v",
        "keywords": "show",
        "numParams": 0
      },
      {
        "name": "Add remote",
        "numParams": 2,
        "cmdText": "git remote add <shortname> <url>"
      },
      {
        "name": "Remove remote",
        "cmdText": "git remote rm <shortname>",
        "numParams": 1,
        "keywords": "delete"
      }
    ]
  },
  {
    "name": "Diff [menu]",
    "subtasks": [
      {
        "name": "Preview merge",
        "cmdText": "git diff ...<otherbranch>",
        "numParams": 1
      },
      {
        "name": "Diff working copy and HEAD",
        "cmdText": "git diff",
        "numParams": 0
      },
      {
        "name": "Diff staged and HEAD",
        "cmdText": "git diff --staged",
        "numParams": 0
      }
    ]
  },
  {
    "name": "Clone [menu]",
    "subtasks": [
      {
        "name": "Clone",
        "numParams": 1,
        "cmdText": "git clone <url>"
      },
      {
        "name": "Clone single branch",
        "numParams": 2,
        "cmdText": "git clone <url> --branch <branch> --single-branch"
      }
    ]
  }
]

